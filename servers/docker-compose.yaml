services:
  # Reverse Proxy as HTTP/HTTPS Ingress
  proxy:
    image: traefik:2.11
    restart: unless-stopped
    networks:
      - proxy
    ports:
      - 80:80/tcp   # HTTP
      - 443:443/tcp # HTTPS
    environment:
      # Access credentials for DNS Challenge with INWX
      INWX_USERNAME_FILE: /run/secrets/inwx_username
      INWX_PASSWORD_FILE: /run/secrets/inwx_password
      INWX_SHARED_SECRET_FILE: /run/secrets/inwx_secret
    command:
      # Enable access log
      - --accesslog=true
      # Configure HTTP and HTTPS entrypoints
      - --entrypoints.web.address=:80/tcp
      - --entrypoints.websecure.address=:443/tcp
      - --entrypoints.websecure.http.tls=true
      # Configure Let's Encrypt with DNS challenge
      - --entrypoints.websecure.http.tls.certresolver=letsencrypt
      - --certificatesresolvers.letsencrypt.acme.email=${LETS_ENCRYPT_EMAIL}
      - --certificatesresolvers.letsencrypt.acme.storage=/etc/traefik/acme/acme.json
      - --certificatesresolvers.letsencrypt.acme.dnschallenge.provider=inwx
      - --certificatesresolvers.letsencrypt.acme.dnschallenge.resolvers=1.1.1.1:53,8.8.8.8:53
      # Enable Docker provider
      - --providers.docker=true
      - --providers.docker.endpoint=unix:///var/run/docker.sock
      - --providers.docker.exposedbydefault=false
      - --providers.docker.network=proxy
      # # Enable JWT Plugin
      # - --experimental.plugins.jwt.modulename=github.com/Brainnwave/jwt-middleware
      # - --experimental.plugins.jwt.version=v1.1.8
    secrets:
      # Access credentials for DNS Challenge with INWX
      - inwx_username
      - inwx_password
      - inwx_secret
    volumes:
      # Mount Docker Socket to use it as provider
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # Mount certificates for persistency
      - .secrets/acme:/etc/traefik/acme:rw
  
  # eMSP Authorization Server
  as-http:
    image: nginx:1.24-alpine
    depends_on:
      - proxy
      - as-php
    networks:
      - proxy
    labels:
      - traefik.enable=true
      - traefik.http.routers.emsp-as.entrypoints=web,websecure
      - traefik.http.routers.emsp-as.rule=Host(`${AUTHORIZATION_SERVER_DOMAIN}`)
    volumes:
      - ./emsp-as/src:/var/www:ro
      - ./emsp-as/nginx.conf:/etc/nginx/conf.d/default.conf:ro
  as-php:
    image: php:8.3-fpm-alpine
    networks:
      - proxy
    environment:
      # Configuration
      API_KEY: ${AUTHLETE_API_KEY}
      API_SECRET: ${AUTHLETE_API_SECRET}
      CLIENT_ID: ${AUTHLETE_CLIENT_ID}
      CLIENT_SECRET: ${AUTHLETE_CLIENT_SECRET}
    volumes:
      - ./emsp-as/src:/var/www:ro

  # eMSP Backend to request X.509 certificates
  emsp-backend:
    build:
      context: ./emsp-backend
      dockerfile: Dockerfile
    restart: unless-stopped
    depends_on:
      - proxy
      - as-http
    networks:
      - proxy
    environment:
      # Configuration
      TRUSTED_ISSUER: https://${AUTHORIZATION_SERVER_DOMAIN}
      TRUSTED_AUDIENCE: ${TRUSTED_AUDIENCE}
      JWKS_URI: http://as-http:8080/api/jwks
      REQUIRED_SCOPES: csr
      CSR_DIR: /app/csr
      CRT_DIR: /app/crt
      SIGNING_CMD: ./scripts/sign-cert.sh
      SIGNING_ARGS: "$${CSR_FILE} $${CRT_FILE}"
    labels:
      - traefik.enable=true
      - traefik.http.routers.emsp-backend.entrypoints=web,websecure
      - traefik.http.routers.emsp-backend.rule=Host(`${EMSP_BACKEND_DOMAIN}`)
      # # JWT Bearer Authorization:
      # - traefik.http.routers.emsp-backend.middlewares=emsp-backend@docker
      # - traefik.http.middlewares.emsp-backend.plugin.jwt.issuers=https://${AUTHORIZATION_SERVER_DOMAIN}
      # - traefik.http.middlewares.emsp-backend.plugin.jwt.require.aud=${TRUSTED_AUDIENCE}
      # - traefik.http.middlewares.emsp-backend.plugin.jwt.require.iss=https://${AUTHORIZATION_SERVER_DOMAIN}
      # - traefik.http.middlewares.emsp-backend.plugin.jwt.require.scopes=csr
    volumes:
      - .secrets/ca:/app/ca:rw
      - .secrets/csr:/app/csr:rw
      - .secrets/crt:/app/crt:rw

  # User Agent for Certificate Provisioning
  user-agent:
    build:
      context: ./user-agent
      dockerfile: Dockerfile
    restart: unless-stopped
    depends_on:
      - proxy
    networks:
      - proxy
    labels:
      - traefik.enable=true
      - traefik.http.routers.user-agent.entrypoints=web,websecure
      - traefik.http.routers.user-agent.rule=Host(`${USER_AGENT_DOMAIN}`)

secrets:
  # INWX Credentials for DNS Challenge
  inwx_username:
    file: .secrets/inwx_username.txt
  inwx_password:
    file: .secrets/inwx_password.txt
  inwx_secret:
    file: .secrets/inwx_secret.txt

networks:
  # Network between Reverse Proxy and services
  proxy:
    driver: bridge
    name: emsp_proxy
