services:
  # Reverse Proxy as HTTP/HTTPS Ingress
  proxy:
    image: traefik:2.11
    restart: unless-stopped
    networks:
      - proxy
    ports:
      - 80:80/tcp   # HTTP
      - 443:443/tcp # HTTPS
    environment:
      # Access credentials for DNS Challenge with INWX
      INWX_USERNAME_FILE: /run/secrets/inwx_username
      INWX_PASSWORD_FILE: /run/secrets/inwx_password
      INWX_SHARED_SECRET_FILE: /run/secrets/inwx_secret
    command:
      # Enable access log
      - --accesslog=true
      # Configure HTTP and HTTPS entrypoints
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --entrypoints.websecure.http.tls=true
      # Configure Let's Encrypt with DNS challenge
      - --entrypoints.websecure.http.tls.certresolver=letsencrypt
      - --certificatesresolvers.letsencrypt.acme.email=jonas.primbs@uni-tuebingen.de
      - --certificatesresolvers.letsencrypt.acme.storage=/etc/traefik/acme/acme.json
      - --certificatesresolvers.letsencrypt.acme.dnschallenge.provider=inwx
      - --certificatesresolvers.letsencrypt.acme.dnschallenge.resolvers=1.1.1.1:53,8.8.8.8:53
      # Enable Docker provider
      - --providers.docker=true
      - --providers.docker.endpoint=unix:///var/run/docker.sock
      - --providers.docker.exposedbydefault=false
      - --providers.docker.network=proxy
      # # Enable JWT Plugin
      # - --experimental.plugins.jwt.modulename=github.com/Brainnwave/jwt-middleware
      # - --experimental.plugins.jwt.version=v1.1.5
    secrets:
      - inwx_username
      - inwx_password
      - inwx_secret
    volumes:
      # Mount Docker Socket to use it as provider
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # Mount certificates for persistency
      - .secrets/acme:/etc/traefik/acme
  
  # eMSP Authorization Server
  as-http:
    image: nginx:1.24-alpine
    depends_on:
      - proxy
      - as-php
    networks:
      - proxy
      - php_fpm
    labels:
      # Enable HTTP and HTTPS Entrypoint via http(s)://as.oidcharge.primbs.dev
      - traefik.enable=true
      - traefik.http.routers.emsp-as.entrypoints=web,websecure
      - traefik.http.routers.emsp-as.rule=Host(`as.oidcharge.primbs.dev`)
      - traefik.http.routers.emsp-as.tls=true
      - traefik.http.routers.emsp-as.tls.certresolver=letsencrypt
    volumes:
      - ./emsp-as-php/src:/var/www/html
      - ./emsp-as-php/nginx.conf:/etc/nginx/conf.d/default.conf
  as-php:
    image: php:8.3-fpm-alpine
    networks:
      - php_fpm
    environment:
      API_KEY: ${API_KEY}
      API_SECRET: ${API_SECRET}
      CLIENT_ID: ${CLIENT_ID}
      CLIENT_SECRET: ${CLIENT_SECRET}
    volumes:
      - ./src:/var/www/html

  # eMSP Backend to request X.509 certificates
  emsp:
    build:
      context: ./emsp-backend
      dockerfile: Dockerfile
    restart: unless-stopped
    networks:
      - proxy
    depends_on:
      - proxy
      - as-http
      - as-php
    environment:
      PORT: 8080
      TRUSTED_ISSUER: https://as.oidcharge.primbs.dev
      TRUSTED_AUDIENCE: emsp_backend
      JWKS_URI: http://as:8080/api/jwks
      REQUIRED_SCOPES: csr
      CSR_DIR: /app/csr
      CRT_DIR: /app/crt
      SIGNING_CMD: ./scripts/sign-cert.sh
      SIGNING_ARGS: "$${CSR_FILE} $${CRT_FILE}"
    labels:
      # Enable HTTP and HTTPS Entrypoint via http(s)://emsp.oidcharge.primbs.dev
      - traefik.enable=true
      - traefik.http.routers.emsp-backend.entrypoints=web,websecure
      - traefik.http.routers.emsp-backend.rule=Host(`emsp.oidcharge.primbs.dev`)
      - traefik.http.routers.emsp-backend.tls=true
      - traefik.http.routers.emsp-backend.tls.certresolver=letsencrypt
      # # JWT Bearer Authorization:
      # - traefik.http.routers.emsp-backend.middlewares=emsp-backend@docker
      # - traefik.http.middlewares.emsp-backend.plugin.jwt.issuers=https://as.oidcharge.primbs.dev
      # - traefik.http.middlewares.emsp-backend.plugin.jwt.require.aud=emsp_backend
      # - traefik.http.middlewares.emsp-backend.plugin.jwt.require.iss=https://as.oidcharge.primbs.dev
      # - traefik.http.middlewares.emsp-backend.plugin.jwt.require.scopes=csr
    volumes:
      - .secrets/ca:/app/ca
      - .secrets/csr:/app/csr
      - .secrets/crt:/app/crt

  # EV Backend
  # Available on http://ev.localhost/
  ev-backend:
    build:
      context: ./ev-backend
      dockerfile: Dockerfile
    restart: unless-stopped
    depends_on:
      - proxy
    networks:
      - proxy
    labels:
      - traefik.enable=true
      - traefik.http.routers.ev-backend.entrypoints=web
      - traefik.http.routers.ev-backend.rule=Host(`ev.localhost`)
    environment:
      - CSR_ENDPOINT=https://emsp.oidcharge.primbs.dev
      - OUTPUT_FILE=/output/cc.cer
    volumes:
      - ./secrets/cc_output:/output
      - ./ev-backend/config:/app/config

  # User Agent for Certificate Provisioning
  # Available on https://ua.oidcharge.primbs.dev/
  user-agent:
    build:
      context: ./user-agent
      dockerfile: Dockerfile
    restart: unless-stopped
    depends_on:
      - proxy
    networks:
      - proxy
    labels:
      - traefik.enable=true
      - traefik.http.routers.user-agent.entrypoints=web,websecure
      - traefik.http.routers.user-agent.rule=Host(`ua.oidcharge.primbs.dev`)

secrets:
  # INWX Credentials for DNS Challenge
  inwx_username:
    file: .secrets/inwx_username.txt
  inwx_password:
    file: .secrets/inwx_password.txt
  inwx_secret:
    file: .secrets/inwx_secret.txt
  # authlete_api_key:
  #   file: .secrets/authlete_api_key.txt
  # authlete_api_secret:
  #   file: .secrets/authlete_api_secret.txt

networks:
  proxy:
    driver: bridge
  php_fpm:
    driver: bridge

volumes:
  cc_output:
