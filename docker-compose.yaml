services:
  # Reverse Proxy as HTTP/HTTPS Ingress
  proxy:
    image: traefik:2.10
    restart: unless-stopped
    ports:
      - 80:80/tcp
      - 443:443/tcp
    environment:
      # Access Credentials for DNS Challenge with INWX
      INWX_USERNAME_FILE: /run/secrets/inwx_username
      INWX_PASSWORD_FILE: /run/secrets/inwx_password
      INWX_SHARED_SECRET_FILE: /run/secrets/inwx_secret
    command:
      # Enable Access Log
      - --accesslog=true
      # Configure HTTP and HTTPS Entrypoints
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --entrypoints.websecure.http.tls=true
      # Configure Let's Encrypt with DNS Challenge
      - --entrypoints.websecure.http.tls.certresolver=letsencrypt
      - --certificatesresolvers.letsencrypt.acme.email=jonas@primbs.is.it
      - --certificatesresolvers.letsencrypt.acme.storage=/etc/traefik/acme/acme.json
      - --certificatesresolvers.letsencrypt.acme.dnschallenge.provider=inwx
      - --certificatesresolvers.letsencrypt.acme.dnschallenge.resolvers=1.1.1.1:53,8.8.8.8:53
      # Enable Docker Provider
      - --providers.docker=true
      - --providers.docker.endpoint=unix:///var/run/docker.sock
      - --providers.docker.exposedbydefault=false
    secrets:
      - inwx_username
      - inwx_password
      - inwx_secret
    volumes:
      # Mount Docker Socket to use it as provider
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # Mount Certificates for persistancy
      - .secrets/acme:/etc/traefik/acme

  # eMSP Authorization Server for Client Authorization
  as:
    build:
      context: ./emsp-authorizationserver
      dockerfile: Dockerfile
    restart: unless-stopped
    depends_on:
      - proxy
    labels:
      # Enable HTTP and HTTPS Entrypoint via http(s)://as.oidcharge.primbs.dev
      - traefik.enable=true
      - traefik.http.routers.emsp-as.entrypoints=web,websecure
      - traefik.http.routers.emsp-as.rule=Host(`as.oidcharge.primbs.dev`)
      - traefik.http.routers.emsp-as.tls=true
      - traefik.http.routers.emsp-as.tls.certresolver=letsencrypt
    volumes:
      - .secrets/authlete.properties:/app/authlete.properties

  # eMSP Backend to request X.509 certificates
  emsp:
    build:
      context: ./emsp-backend
      dockerfile: Dockerfile
    restart: unless-stopped
    depends_on:
      - proxy
      - as
    environment:
      PORT: 8080
      TRUSTED_ISSUER: https://as.oidcharge.primbs.dev
      TRUSTED_AUDIENCE: emsp_backend
      JWKS_URI: http://api.authlete.com/api/service/jwks/get/direct/174842823221896
      REQUIRED_SCOPES: csr
      CSR_DIR: ./csr
      CRT_DIR: ./crt
      SIGNING_CMD: ./sign-cert.sh
      SIGNING_ARGS: "$${CSR_FILE} $${CRT_FILE}"
    labels:
      # Enable HTTP and HTTPS Entrypoint via http(s)://emsp.oidcharge.primbs.dev
      - traefik.enable=true
      - traefik.http.routers.emsp-backend.entrypoints=web,websecure
      - traefik.http.routers.emsp-backend.rule=Host(`emsp.oidcharge.primbs.dev`)
      - traefik.http.routers.emsp-backend.tls=true
      - traefik.http.routers.emsp-backend.tls.certresolver=letsencrypt
    volumes:
      - .secrets/csr:/app/csr
      - .secrets/crt:/app/crt

  # EV Backend
  ev-backend:
    build:
      context: ./ev-backend
      dockerfile: Dockerfile
    restart: unless-stopped
    depends_on:
      - proxy
    labels:
      - traefik.enable=true
      - traefik.http.routers.ev-backend.entrypoints=web
      - traefik.http.routers.ev-backend.rule=Host(`ev.localhost`)
    environment:
      - CSR_ENDPOINT=http://emsp-backend
      - OUTPUT_FILE=/output/cc.cer
      - API_KEY=${API_KEY}
      - API_SECRET=${API_SECRET}
    volumes:
      - cc_output:/output
      - ./ev-backend/config:/app/config

  # User Agent for Certificate Provisioning
  user-agent:
    build:
      context: ./user-agent
      dockerfile: Dockerfile
    restart: unless-stopped
    depends_on:
      - proxy
    labels:
      - traefik.enable=true
      - traefik.http.routers.user-agent.entrypoints=web,websecure
      - traefik.http.routers.user-agent.rule=Host(`ua.oidcharge.primbs.dev`)
      - traefik.http.routers.user-agent.tls=true
      - traefik.http.routers.user-agent.tls.certresolver=letsencrypt

secrets:
  # INWX Credentials for DNS Challenge
  inwx_username:
    file: .secrets/inwx_username.txt
  inwx_password:
    file: .secrets/inwx_password.txt
  inwx_secret:
    file: .secrets/inwx_secret.txt

volumes:
  cc_output:
