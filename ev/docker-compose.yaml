services:
  # # Reverse Proxy as HTTP Ingress
  # http_proxy:
  #   image: traefik:2.11
  #   restart: unless-stopped
  #   networks:
  #     - proxy
  #   ports:
  #     - 80:80/tcp   # HTTP
  #   command:
  #     # Enable access log
  #     - --accesslog=true
  #     # Configure HTTP and HTTPS entrypoints
  #     - --entrypoints.web.address=:80
  #     # Enable Docker provider
  #     - --providers.docker=true
  #     - --providers.docker.endpoint=unix:///var/run/docker.sock
  #     - --providers.docker.exposedbydefault=false
  #     - --providers.docker.network=proxy
  #   volumes:
  #     # Mount Docker Socket to use it as provider
  #     - /var/run/docker.sock:/var/run/docker.sock:ro

  # # BLE Proxy
  # ble-proxy:
  #   build:
  #     context: ./ble-proxy
  #     dockerfile: Dockerfile
  #   privileged: true
  #   restart: unless-stopped
  #   networks:
  #     - proxy
  #   environment:
  #     DEVICE_NAME: MyEV

  # EV Backend
  ev-backend:
    build:
      context: ./ev-backend
      dockerfile: Dockerfile
    restart: unless-stopped
    # depends_on:
      # - ble-proxy
      # - http_proxy
    hostname: ${EV_BACKEND_DOMAIN}
    networks:
      - proxy
    labels:
      - traefik.enable=true
      - traefik.http.routers.ev-backend.entrypoints=web
      - traefik.http.routers.ev-backend.rule=Host(`${EV_BACKEND_DOMAIN}`)
      - traefik.http.routers.ev-backend.service=ev-backend
      - traefik.http.services.ev-backend.loadbalancer.server.port=80
    environment:
      PORT: 80
      CSR_ENDPOINT: https://${EMSP_BACKEND_DOMAIN}
      OUTPUT_FILE: /output/cc.cer
    volumes:
      - ./.secrets/cc_output:/output
      - ./ev-backend/config:/app/config

networks:
  # Network between Reverse Proxy and services
  proxy:
    external: true
    name: emsp_proxy
